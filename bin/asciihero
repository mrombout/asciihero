#!/usr/bin/env node
'use strict'

const { Options, Invoker, processor } = require('@asciidoctor/cli')
const pkg = require('../package.json')
const converter = require('asciidoctor-pdf/lib/converter.js')
const extensions = require('../packages/asciihero/extensions.js')
const path = require('node:path')

process.title = 'asciihero'

async function convertFiles (files, argv, options, verbose, preview) {
  for (const file of files) {
    if (verbose) {
      console.log(`converting file ${file.contents ? '-' : file.path}`)
    }
    await converter.convert(processor, file, options, argv.timings, argv.watch, preview)
  }
}

class AsciiHeroOptions {
  constructor () {
    this.options = new Options({})
      .addOption('preview', {
        default: false,
        describe: 'open the otherwise headless browser for inspecting the generated HTML document (before it gets converted to PDF)',
        type: 'boolean'
      })
  }

  parse (argv) {
    return this.options.parse(argv)
  }
}

class AsciiHeroInvoker extends Invoker {
  async invoke () {
    const cliOptions = this.options
    const processArgs = cliOptions.argv.slice(2)
    const { args } = cliOptions
    const { verbose, version, files, preview } = args
    if (version || (verbose && processArgs.length === 1)) {
      this.showVersion()
      return { exit: true }
    }

    const asciidoctorOptions = cliOptions.options
    const stylesheetBase = path.resolve(__dirname, `../base.css`)
    const stylesheetFightingFantasy = path.resolve(__dirname, `../ff.css`)
    cliOptions.attributes.push(`stylesheet=${stylesheetBase},${stylesheetFightingFantasy}`)

    let templates = require('asciidoctor-pdf/lib/document/document-converter.js').templates
    converter.registerTemplateConverter(processor, templates)

    extensions.register(processor.Extensions)
    
    Invoker.prepareProcessor(args, processor)
    if (files && files.length > 0) {
      const fileObjects = files.map(file => ({ path: file }))
      await convertFiles(fileObjects, args, asciidoctorOptions, verbose, preview)
      return { exit: true }
    }

    this.showHelp()
    return { exit: true }
  }

  version () {
    return `AsciiHero ${pkg.version} using ${super.version()}`
  }
}

;(async () => {
  const options = new AsciiHeroOptions().parse(process.argv)
  return new AsciiHeroInvoker(options).invoke()
})()
  .then((result) => {
    if (result.exit) {
      process.exit(0)
    }
  })
  .catch((error) => {
    console.error('ERROR: ', error)
    process.exit(1)
  })
