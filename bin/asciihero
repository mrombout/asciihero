#!/usr/bin/env node
const yargs = require('yargs/yargs')
const { hideBin } = require('yargs/helpers')
const { watch } = require('node:fs')
const path = require('node:path')

const Asciidoctor = require('asciidoctor')
const asciihero = require('../packages/asciihero/asciihero.js')

const arg = yargs(hideBin(process.argv))
  .command('$0 [files...]', '', () => {
    return yargs
  })
  .option('watch', {
    type: 'boolean',
    description: 'Watch a the files for changes, and automatically convert them when they change.'
  })
  .option('debug-output', {
    type: 'boolean',
    description: 'Write intermediate formats to disk, in addition to target output file.'
  })
  .option('style', {
    type: 'string',
    description: 'Set style to use for output format.',
    default: 'ff',
    choices: [
      'proteus',
      'ff'
    ]
  })
  .option('format', {
    type: 'string',
    description: 'Set format to use for output.',
    default: 'html',
    choices: [
      'pdf',
      'epub',
      'html'
    ]
  })
  .parse()

function convertFile (asciidoctor, format, style, file) {
  const label = `converting ${file}`

  console.time(label)
  if (format === 'html') {
    const stylesheetPath = path.resolve(__dirname, `../${style}.css`)
    const options = {
      to_file: true,
      mkdirs: true,
      attributes: {
        stylesheet: stylesheetPath
      }
    }
    asciidoctor.convertFile(file, options)
  } else if (format === 'pdf') {
    const { execSync } = require('node:child_process')

    const stylesheetPath = path.resolve(__dirname, `../${style}.css`)
    const extensionPath = path.resolve(__dirname, '../packages/asciihero/asciihero.js')
    console.log(extensionPath)
    const returned = execSync(`npx asciidoctor-web-pdf --require ${extensionPath}  --attribute stylesheet="${stylesheetPath}" ${file}`)
    console.log(returned.toString())
  } else if (format === 'epub') {
    console.log("format 'epub' is not supported yet")
  }
  console.timeEnd(label)
}

const asciidoctor = Asciidoctor()
asciihero.register(asciidoctor.Extensions)

if (arg.watch) {
  for (const fileIndex in arg.files) {
    const file = arg.files[fileIndex]
    watch(file, (eventType, filename) => {
      if (eventType !== 'change') {
        return
      }

      if (filename) {
        convertFile(asciidoctor, arg.format, arg.style, file)
      }
    })
  }
} else {
  for (const fileIndex in arg.files) {
    const file = arg.files[fileIndex]
    convertFile(asciidoctor, arg.format, arg.style, file)
  }
}
